ALL_TARGETS = $(TARGETS) $(TEST_TARGETS)

# All Target
all: debug valgrind lcov cppcheck

# Build targets
release: CPP_FLAGS += $(CPP_PROJECT_FLAGS) $(CPP_RELEASE_FLAGS)
release: CPP_LINK_FLAGS += $(CPP_PROJECT_LINK_FLAGS)
release: CPP_LIB_PATHS := $(CPP_PROJECT_LIB_PATHS)
release: CPP_LIBS := $(CPP_PROJECT_LIBS)
release: $(ALL_TARGETS)

debug: CPP_FLAGS += $(CPP_PROJECT_FLAGS) $(CPP_DEBUG_FLAGS) $(DEBUG_PROJECT_FLAGS)
debug: CPP_LINK_FLAGS += $(CPP_PROJECT_LINK_FLAGS) $(CPP_DEBUG_LINK_FLAGS) $(DEBUG_PROJECT_LINK_FLAGS)
debug: CPP_LIB_PATHS := $(CPP_PROJECT_LIB_PATHS) $(DEBUG_PROJECT_LIB_PATHS)
debug: CPP_LIBS := $(CPP_PROJECT_LIBS) $(DEBUG_PROJECT_LIBS)
debug: $(ALL_TARGETS)

devel: CPP_FLAGS += $(CPP_PROJECT_FLAGS) $(CPP_DEBUG_FLAGS) $(DEBUG_PROJECT_FLAGS)
devel: CPP_LINK_FLAGS += $(CPP_PROJECT_LINK_FLAGS) $(CPP_DEBUG_LINK_FLAGS) $(DEBUG_PROJECT_LINK_FLAGS)
devel: CPP_LIB_PATHS := $(CPP_PROJECT_LIB_PATHS) $(DEBUG_PROJECT_LIB_PATHS)
devel: CPP_LIBS := $(CPP_PROJECT_LIBS) $(DEBUG_PROJECT_LIBS)
devel: $(TARGETS)

# Clean target
clean:
	@echo 'Cleaning $(PROJECT)'
	@$(RM) build report
	@echo 'Finished cleaning $(PROJECT)'
	@echo ' '

.PHONY: all clean
